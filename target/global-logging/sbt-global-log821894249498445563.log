[0m[[0m[0mdebug[0m] [0m[0m> Exec(;Test/compile; collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(Test/compile, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / compile[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"54","parents":[]},"eventTime":1631611427827,"message":"Compiling root","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/main/scala/at/jku/ssw/popl/assn2/imp/Expr.scala"},"buildTarget":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/main/scala/at/jku/ssw/popl/assn2/imp/Statement.scala"},"buildTarget":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/main/scala/at/jku/ssw/popl/assn2/imp/Main.scala"},"buildTarget":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/main/scala/at/jku/ssw/popl/assn2/imp/State.scala"},"buildTarget":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/main/scala/at/jku/ssw/popl/assn2/imp/Parser.scala"},"buildTarget":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"54","parents":[]},"eventTime":1631611427836,"message":"Compiled root","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Compile"},"errors":0,"warnings":0,"time":9}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"55","parents":[]},"eventTime":1631611427840,"message":"Compiling root-test","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/test/scala/Test1.scala"},"buildTarget":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Test"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"55","parents":[]},"eventTime":1631611427847,"message":"Compiled root-test","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/#root/Test"},"errors":0,"warnings":0,"time":7}})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 14.09.2021, 11:23:47[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\hp\Dropbox\Lehre\POPL2\POPL_2021\Prgrms\Scala\popl2021-assn2\target\scala-3.0.2\zinc\inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 14.09.2021, 11:23:47[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/setTraceNotification: JsonRpcNotificationMessage(2.0, $/setTraceNotification, {"value":"off"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/setTraceNotification: JsonRpcNotificationMessage(2.0, $/setTraceNotification, {"value":"off"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/.metals/readonly/dependencies/src.zip/java.base/java/io/FileInputStream.java","languageId":"java","version":1,"text":"/*\n * Copyright (c) 1994, 2020, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.io;\n\nimport java.nio.channels.FileChannel;\nimport sun.nio.ch.FileChannelImpl;\n\n\n/**\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n */\npublic class FileInputStream extends InputStream\n{\n    /* File Descriptor - handle to the open file */\n    private final FileDescriptor fd;\n\n    /**\n     * The path of the referenced file\n     * (null if the stream is created with a file descriptor)\n     */\n    private final String path;\n\n    private volatile FileChannel channel;\n\n    private final Object closeLock = new Object();\n\n    private volatile boolean closed;\n\n    /**\n     * Creates a {@code FileInputStream} by\n     * opening a connection to an actual file,\n     * the file named by the path name {@code name}\n     * in the file system.  A new {@code FileDescriptor}\n     * object is created to represent this file\n     * connection.\n     * <p>\n     * First, if there is a security\n     * manager, its {@code checkRead} method\n     * is called with the {@code name} argument\n     * as its argument.\n     * <p>\n     * If the named file does not exist, is a directory rather than a regular\n     * file, or for some other reason cannot be opened for reading then a\n     * {@code FileNotFoundException} is thrown.\n     *\n     * @param      name   the system-dependent file name.\n     * @throws     FileNotFoundException  if the file does not exist,\n     *             is a directory rather than a regular file,\n     *             or for some other reason cannot be opened for\n     *             reading.\n     * @throws     SecurityException      if a security manager exists and its\n     *             {@code checkRead} method denies read access\n     *             to the file.\n     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n     */\n    public FileInputStream(String name) throws FileNotFoundException {\n        this(name != null ? new File(name) : null);\n    }\n\n    /**\n     * Creates a {@code FileInputStream} by\n     * opening a connection to an actual file,\n     * the file named by the {@code File}\n     * object {@code file} in the file system.\n     * A new {@code FileDescriptor} object\n     * is created to represent this file connection.\n     * <p>\n     * First, if there is a security manager,\n     * its {@code checkRead} method  is called\n     * with the path represented by the {@code file}\n     * argument as its argument.\n     * <p>\n     * If the named file does not exist, is a directory rather than a regular\n     * file, or for some other reason cannot be opened for reading then a\n     * {@code FileNotFoundException} is thrown.\n     *\n     * @param      file   the file to be opened for reading.\n     * @throws     FileNotFoundException  if the file does not exist,\n     *             is a directory rather than a regular file,\n     *             or for some other reason cannot be opened for\n     *             reading.\n     * @throws     SecurityException      if a security manager exists and its\n     *             {@code checkRead} method denies read access to the file.\n     * @see        java.io.File#getPath()\n     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n     */\n    public FileInputStream(File file) throws FileNotFoundException {\n        String name = (file != null ? file.getPath() : null);\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkRead(name);\n        }\n        if (name == null) {\n            throw new NullPointerException();\n        }\n        if (file.isInvalid()) {\n            throw new FileNotFoundException(\"Invalid file path\");\n        }\n        fd = new FileDescriptor();\n        fd.attach(this);\n        path = name;\n        open(name);\n        FileCleanable.register(fd);       // open set the fd, register the cleanup\n    }\n\n    /**\n     * Creates a {@code FileInputStream} by using the file descriptor\n     * {@code fdObj}, which represents an existing connection to an\n     * actual file in the file system.\n     * <p>\n     * If there is a security manager, its {@code checkRead} method is\n     * called with the file descriptor {@code fdObj} as its argument to\n     * see if it's ok to read the file descriptor. If read access is denied\n     * to the file descriptor a {@code SecurityException} is thrown.\n     * <p>\n     * If {@code fdObj} is null then a {@code NullPointerException}\n     * is thrown.\n     * <p>\n     * This constructor does not throw an exception if {@code fdObj}\n     * is {@link java.io.FileDescriptor#valid() invalid}.\n     * However, if the methods are invoked on the resulting stream to attempt\n     * I/O on the stream, an {@code IOException} is thrown.\n     *\n     * @param      fdObj   the file descriptor to be opened for reading.\n     * @throws     SecurityException      if a security manager exists and its\n     *             {@code checkRead} method denies read access to the\n     *             file descriptor.\n     * @see        SecurityManager#checkRead(java.io.FileDescriptor)\n     */\n    public FileInputStream(FileDescriptor fdObj) {\n        SecurityManager security = System.getSecurityManager();\n        if (fdObj == null) {\n            throw new NullPointerException();\n        }\n        if (security != null) {\n            security.checkRead(fdObj);\n        }\n        fd = fdObj;\n        path = null;\n\n        /*\n         * FileDescriptor is being shared by streams.\n         * Register this stream with FileDescriptor tracker.\n         */\n        fd.attach(this);\n    }\n\n    /**\n     * Opens the specified file for reading.\n     * @param name the name of the file\n     */\n    private native void open0(String name) throws FileNotFoundException;\n\n    // wrap native call to allow instrumentation\n    /**\n     * Opens the specified file for reading.\n     * @param name the name of the file\n     */\n    private void open(String name) throws FileNotFoundException {\n        open0(name);\n    }\n\n    /**\n     * Reads a byte of data from this input stream. This method blocks\n     * if no input is yet available.\n     *\n     * @return     the next byte of data, or {@code -1} if the end of the\n     *             file is reached.\n     * @throws     IOException  if an I/O error occurs.\n     */\n    public int read() throws IOException {\n        return read0();\n    }\n\n    private native int read0() throws IOException;\n\n    /**\n     * Reads a subarray as a sequence of bytes.\n     * @param     b the data to be written\n     * @param     off the start offset in the data\n     * @param     len the number of bytes that are written\n     * @throws    IOException If an I/O error has occurred.\n     */\n    private native int readBytes(byte b[], int off, int len) throws IOException;\n\n    /**\n     * Reads up to {@code b.length} bytes of data from this input\n     * stream into an array of bytes. This method blocks until some input\n     * is available.\n     *\n     * @param      b   the buffer into which the data is read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             the file has been reached.\n     * @throws     IOException  if an I/O error occurs.\n     */\n    public int read(byte b[]) throws IOException {\n        return readBytes(b, 0, b.length);\n    }\n\n    /**\n     * Reads up to {@code len} bytes of data from this input stream\n     * into an array of bytes. If {@code len} is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and {@code 0} is returned.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array {@code b}\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             the file has been reached.\n     * @throws     NullPointerException If {@code b} is {@code null}.\n     * @throws     IndexOutOfBoundsException If {@code off} is negative,\n     *             {@code len} is negative, or {@code len} is greater than\n     *             {@code b.length - off}\n     * @throws     IOException  if an I/O error occurs.\n     */\n    public int read(byte b[], int off, int len) throws IOException {\n        return readBytes(b, off, len);\n    }\n\n    /**\n     * Skips over and discards {@code n} bytes of data from the\n     * input stream.\n     *\n     * <p>The {@code skip} method may, for a variety of\n     * reasons, end up skipping over some smaller number of bytes,\n     * possibly {@code 0}. If {@code n} is negative, the method\n     * will try to skip backwards. In case the backing file does not support\n     * backward skip at its current position, an {@code IOException} is\n     * thrown. The actual number of bytes skipped is returned. If it skips\n     * forwards, it returns a positive value. If it skips backwards, it\n     * returns a negative value.\n     *\n     * <p>This method may skip more bytes than what are remaining in the\n     * backing file. This produces no exception and the number of bytes skipped\n     * may include some number of bytes that were beyond the EOF of the\n     * backing file. Attempting to read from the stream after skipping past\n     * the end will result in -1 indicating the end of the file.\n     *\n     * @param      n   the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     * @throws     IOException  if n is negative, if the stream does not\n     *             support seek, or if an I/O error occurs.\n     */\n    public long skip(long n) throws IOException {\n        return skip0(n);\n    }\n\n    private native long skip0(long n) throws IOException;\n\n    /**\n     * Returns an estimate of the number of remaining bytes that can be read (or\n     * skipped over) from this input stream without blocking by the next\n     * invocation of a method for this input stream. Returns 0 when the file\n     * position is beyond EOF. The next invocation might be the same thread\n     * or another thread. A single read or skip of this many bytes will not\n     * block, but may read or skip fewer bytes.\n     *\n     * <p> In some cases, a non-blocking read (or skip) may appear to be\n     * blocked when it is merely slow, for example when reading large\n     * files over slow networks.\n     *\n     * @return     an estimate of the number of remaining bytes that can be read\n     *             (or skipped over) from this input stream without blocking.\n     * @throws     IOException  if this file input stream has been closed by calling\n     *             {@code close} or an I/O error occurs.\n     */\n    public int available() throws IOException {\n        return available0();\n    }\n\n    private native int available0() throws IOException;\n\n    /**\n     * Closes this file input stream and releases any system resources\n     * associated with the stream.\n     *\n     * <p> If this stream has an associated channel then the channel is closed\n     * as well.\n     *\n     * @apiNote\n     * Overriding {@link #close} to perform cleanup actions is reliable\n     * only when called directly or when called by try-with-resources.\n     * Do not depend on finalization to invoke {@code close};\n     * finalization is not reliable and is deprecated.\n     * If cleanup of native resources is needed, other mechanisms such as\n     * {@linkplain java.lang.ref.Cleaner} should be used.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     *\n     * @revised 1.4\n     * @spec JSR-51\n     */\n    public void close() throws IOException {\n        if (closed) {\n            return;\n        }\n        synchronized (closeLock) {\n            if (closed) {\n                return;\n            }\n            closed = true;\n        }\n\n        FileChannel fc = channel;\n        if (fc != null) {\n            // possible race with getChannel(), benign since\n            // FileChannel.close is final and idempotent\n            fc.close();\n        }\n\n        fd.closeAll(new Closeable() {\n            public void close() throws IOException {\n               fd.close();\n           }\n        });\n    }\n\n    /**\n     * Returns the {@code FileDescriptor}\n     * object  that represents the connection to\n     * the actual file in the file system being\n     * used by this {@code FileInputStream}.\n     *\n     * @return     the file descriptor object associated with this stream.\n     * @throws     IOException  if an I/O error occurs.\n     * @see        java.io.FileDescriptor\n     */\n    public final FileDescriptor getFD() throws IOException {\n        if (fd != null) {\n            return fd;\n        }\n        throw new IOException();\n    }\n\n    /**\n     * Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n     * object associated with this file input stream.\n     *\n     * <p> The initial {@link java.nio.channels.FileChannel#position()\n     * position} of the returned channel will be equal to the\n     * number of bytes read from the file so far.  Reading bytes from this\n     * stream will increment the channel's position.  Changing the channel's\n     * position, either explicitly or by reading, will change this stream's\n     * file position.\n     *\n     * @return  the file channel associated with this file input stream\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public FileChannel getChannel() {\n        FileChannel fc = this.channel;\n        if (fc == null) {\n            synchronized (this) {\n                fc = this.channel;\n                if (fc == null) {\n                    this.channel = fc = FileChannelImpl.open(fd, path, true,\n                        false, false, this);\n                    if (closed) {\n                        try {\n                            // possible race with close(), benign since\n                            // FileChannel.close is final and idempotent\n                            fc.close();\n                        } catch (IOException ioe) {\n                            throw new InternalError(ioe); // should not happen\n                        }\n                    }\n                }\n            }\n        }\n        return fc;\n    }\n\n    private static native void initIDs();\n\n    static {\n        initIDs();\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/build.sbt","languageId":"scala","version":1,"text":"import sbt.Keys.libraryDependencies\r\n\r\nval scala3Version = \"3.0.2\"\r\ncrossScalaVersions ++= Seq(\"2.13.6\", \"3.0.2\")\r\n\r\nlazy val root = project\r\n  .in(file(\".\"))\r\n  .settings(\r\n    name := \"popl2021-assn2\",\r\n    version := \"0.1.0\",\r\n\r\n    scalaVersion := scala3Version,\r\n\r\n    libraryDependencies += \"com.novocode\" % \"junit-interface\" % \"0.11\" % \"test\",\r\n    libraryDependencies += \"org.scala-lang.modules\" %% \"scala-parser-combinators\" % \"2.0.0\"\r\n\r\n  )\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/.metals/readonly/dependencies/src.zip/java.base/java/io/FileInputStream.java"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/src/main/scala/at/jku/ssw/popl/assn2/imp/Main.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/build.sbt"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/build.sbt","languageId":"scala","version":1,"text":"import sbt.Keys.libraryDependencies\r\n\r\nval scala3Version = \"3.0.2\"\r\ncrossScalaVersions ++= Seq(\"2.13.6\", \"3.0.2\")\r\n\r\nlazy val root = project\r\n  .in(file(\".\"))\r\n  .settings(\r\n    name := \"popl2021-assn2\",\r\n    version := \"0.1.0\",\r\n\r\n    scalaVersion := scala3Version,\r\n\r\n    libraryDependencies += \"com.novocode\" % \"junit-interface\" % \"0.11\" % \"test\",\r\n    libraryDependencies += \"org.scala-lang.modules\" %% \"scala-parser-combinators\" % \"2.0.0\"\r\n\r\n  )\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/hp/Dropbox/Lehre/POPL2/POPL_2021/Prgrms/Scala/popl2021-assn2/build.sbt"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m
